// This code automatically generated by TableCodeGen
using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class PlayerData : MonoBehaviour
{
	public TextAsset CharacterData;
	public class Row
	{
		public string Index;
		public string Name;
		public string Attack;
		public string MagicAttack;
		public string HP;
		public string Distance;

	}

	void Start()
	{
		Load (CharacterData);
	}

	List<Row> rowList = new List<Row>();
	bool isLoaded = false;

	public bool IsLoaded()
	{
		return isLoaded;
	}

	public List<Row> GetRowList()
	{
		return rowList;
	}

	public void Load(TextAsset csv)
	{
		rowList.Clear();
		string[][] grid = CsvParser2.Parse(csv.text);
		for(int i = 1 ; i < grid.Length ; i++)
		{
			Row row = new Row();
			row.Index = grid[i][0];
			row.Name = grid[i][1];
			row.Attack = grid[i][2];
			row.MagicAttack = grid[i][3];
			row.HP = grid[i][4];
			row.Distance = grid[i][5];

			rowList.Add(row);
		}
		isLoaded = true;
	}

	public int NumRows()
	{
		return rowList.Count;
	}

	public Row GetAt(int i)
	{
		if(rowList.Count <= i)
			return null;
		return rowList[i];
	}

	public Row Find_Index(string find)
	{
		return rowList.Find(x => x.Index == find);
	}
	public List<Row> FindAll_Index(string find)
	{
		return rowList.FindAll(x => x.Index == find);
	}
	public Row Find_Name(string find)
	{
		return rowList.Find(x => x.Name == find);
	}
	public List<Row> FindAll_Name(string find)
	{
		return rowList.FindAll(x => x.Name == find);
	}
	public Row Find_Attack(string find)
	{
		return rowList.Find(x => x.Attack == find);
	}
	public List<Row> FindAll_Attack(string find)
	{
		return rowList.FindAll(x => x.Attack == find);
	}
	public Row Find_MagicAttack(string find)
	{
		return rowList.Find(x => x.MagicAttack == find);
	}
	public List<Row> FindAll_MagicAttack(string find)
	{
		return rowList.FindAll(x => x.MagicAttack == find);
	}
	public Row Find_HP(string find)
	{
		return rowList.Find(x => x.HP == find);
	}
	public List<Row> FindAll_HP(string find)
	{
		return rowList.FindAll(x => x.HP == find);
	}
	public Row Find_Distance(string find)
	{
		return rowList.Find(x => x.Distance == find);
	}
	public List<Row> FindAll_Distance(string find)
	{
		return rowList.FindAll(x => x.Distance == find);
	}

}